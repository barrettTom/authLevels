#!/usr/bin/python3

from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QMainWindow, QApplication, QTableView, QFileDialog, QMessageBox, QShortcut, QInputDialog
import sys

from lib.menubar import menubar
from lib.TableModel import TableModel
from lib.searchDialog import searchDialog

class authLevels(QMainWindow):
    def __init__(self):
        super().__init__()

        menubar(self)

        self.view = QTableView(self)
        self.view.horizontalHeader().setStretchLastSection(True)
        self.view.setAlternatingRowColors(True)
        self.view.setSortingEnabled(True)
        self.view.verticalHeader().hide()

        self.setCentralWidget(self.view)

        self.model = False

        QShortcut(QKeySequence("Ctrl+Z"), self).activated.connect(self.undo)

        self.show()

    def generate(self):
        if self.model:
            self.model.generateFormat()

    def open(self):
        search = searchDialog.getInfo()
        if search:
            path = QFileDialog.getOpenFileName(self)
            if path[0]:
                self.model = TableModel(self, path[0],search)
                self.view.setModel(self.model)
                self.view.resizeColumnsToContents()

    def openCSV(self):
        path = QFileDialog.getOpenFileName(self)
        if path[0] and self.model:
            language = QInputDialog.getItem(self, 'Language:', "Select Language ", ('ZENONSTR.TXT','GB_EN.TXT','FR_FR.TXT'))
            self.model.giveCSV(path[0], language)

    def save(self):
        if self.model:
            self.model.save()

    def saveAs(self):
        if self.model:
            path = QFileDialog.getSaveFileName(self)
            if path[0]:
                self.model.save(path[0])

    def undo(self):
        if self.model:
            self.model.undo()
            self.view.setFocus()
            self.setFocus()

    def toggleShow(self):
        if self.model:
            self.model.toggleShow()

    def closeEvent(self, event):
        if self.model:
            if self.model.isChanges():
                response = QMessageBox.question(self,"Warning:","There are changes, do you want to save before exiting?", 
                                                QMessageBox.Save | QMessageBox.Cancel)
                if response == QMessageBox.Save:
                    self.model.save()

        event.accept()

app = QApplication(sys.argv)

masterView = authLevels()

sys.exit(app.exec_())
